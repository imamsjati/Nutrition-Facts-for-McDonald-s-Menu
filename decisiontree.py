# -*- coding: utf-8 -*-
"""DecisionTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eBW2DyUHCcTyBY0NC6DvSU_Z2jn-woJv

## **DTS Data Science** 
# Institut Teknologi Sepuluh Nopember (Kelas B)

## **CHALLENGE 3**

## **Nutrition Facts for McDonald's Menu**

**Introduction**

Ray Kroc wanted to build a restaurant system that would be famous for providing food of cosistently high quality and uniform methods of preparation. He wanted to serve burgers, buns, fries and beverages that tasted just the same in Alaska as they did in Alabama. To achieve this, he chose a unique path: persuading both franchisees and suppliers to buy into his vision, working not for McDonald's but for themselves, together with McDonald's. Many of McDonald's most famous menu item's - Like Big Mac, Filet-O-Fish, and Egg McMuffin were created by franchisees

**Nutrition Facts for McDonald's Menu Dataset** provides a nutrition analysis of every menu item on the US McDonald's menu, including breakfast, beef burgers, chicken and fish sandwiches, fries, salads, soda, coffee and tea, milkshakes, and desserts.

# Klasifikasi menggunakan Decision Tree

Menu McDonald's diklasifikasikan berdasarkan nutrisi untuk setiap category dengan menggunakan metode Decision Tree. Pada pengukuran nutrisi untuk 260 item menu McDonald's tersebut, variabel yang digunakan terdiri dari serving size, calories, sodium content, dll (total ada 24 variabel). Variabel yang diprediksi oleh classifier adalah 9 category, yang terdiri dari Breakfast, Beef & Pork, Chicken & Fish, Salads, Snacks & Sides, Desserts, Beverages, and Coffee & Tea, dan smoothies &shakes.

Import packages-packages yang dibutuhkan dan melakukan ploting untuk melihat hubungan antara category dengan 24 variabel
"""

library(caret)
library(e1071)
library(rpart)
library(rpart.plot)
library(randomForest)
colnames(menu)
library(tidyverse)
library(stringr)

menu<-read.csv('menu.csv')
menu

#Melihat hubungan antara Calories dengan beberapa Category
by_calories = menu %>% select(Category, Item, Calories) %>% arrange(desc(Calories)) 
print(head (by_calories, 1))

ggplot(by_calories,aes(x=Category , y = Calories)) +
  geom_point(aes(color = ifelse(Calories >= max(Calories), T, F)), size = 4, shape = 20) +
  scale_color_manual(values = c('blue', 'red')) + 
  labs(color = " Max Calories", y = "Calories Content", title = "Calories Contamination - Mac D Foods") + 
  coord_flip()+
  theme_gray()

#update "menu"
by_caloriesfromfat = menu %>% select(Category, Item, Calories_from_Fat) %>% arrange(desc(Calories_from_Fat)) 
print(head (by_caloriesfromfat, 1))

ggplot(by_caloriesfromfat,aes(x=Category , y = Calories_from_Fat)) +
  geom_point(aes(color = ifelse(Calories_from_Fat >= max(Calories_from_Fat), T, F)), size = 4, shape = 20) +
  scale_color_manual(values = c('blue', 'red')) + 
  labs(color = " Max Calories", y = "Calories from Fat Content", title = "Calories from Fat Contamination - Mac D Foods") + 
  coord_flip()+
  theme_gray()

by_totalfat = menu %>% select(Category, Item, Total_Fat) %>% arrange(desc(Total_Fat)) 
print(head (by_totalfat, 1))

ggplot(by_totalfat,aes(x=Category , y = Total_Fat)) +
  geom_point(aes(color = ifelse(Total_Fat >= max(Total_Fat), T, F)), size = 4, shape = 20) +
  scale_color_manual(values = c('blue', 'red')) + 
  labs(color = " Max Calories", y = "Total Fat Content", title = "Total Fat Contamination - Mac D Foods") + 
  coord_flip()+
  theme_gray()

"""Menghapus beberapa kolom yang tidak dibutuhkan untuk memprediksi category berdasarkan kandungan nutrisi. Kolom tersebut terdiri dari Saturated.Fat(%Daily Value), Cholesterol(%Daily Value), Sodium (%Daily Value), Carbohydrates (%Daily Value), Dietary.Fiber (%Daily Value), Item, dan Serving.Size."""

#summary of the dataset
summary(menu)
#Hapus kolom yang tidak diperlukan 

menu$'Saturated.Fat....Daily.Value.' <- NULL
print(menu$'Saturated.Fat....Daily.Value.' <- NULL)

menu$'Cholesterol....Daily.Value.' <- NULL
print(menu$'Cholesterol....Daily.Value.' <- NULL)


menu$'Sodium....Daily.Value.' <- NULL
print(menu$'Sodium....Daily.Value.' <- NULL)

menu$'Carbohydrates....Daily.Value.' <- NULL
print(menu$'Carbohydrates....Daily.Value.' <- NULL)

menu$'Dietary.Fiber....Daily.Value.' <- NULL
print(menu$'Dietary.Fiber....Daily.Value.' <- NULL)

menu$Item <- NULL
print(menu$Item <- NULL)

menu$Serving.Size <- NULL
print(menu$Serving.Size <- NULL)

"""Mengganti tipe data character pada category ke dalam factor."""

#mengganti tipe chr(character) pada category ke factor
class(menu$Category) 
menu$Category <- as.factor(menu$Category)  
class(menu$Category) 

#data menu
str(menu)
levels(menu$Category)

"""Melakukan pembagian data training sebesar 80% dan data testing sebesar 20%."""

#training data dan test data (dengan training data = 80% dan  testing data = 20%)
set.seed(1)
index <- createDataPartition(menu$Category, p=0.80, list=FALSE) 
index

train <- menu[index,]
train

test <- menu[-index,]
test

"""Membangun model yang akan diprediksi dengan menggunakan metode Decision Tree dan melakukan visualisasi berdasarkan model yang terbentuk."""

#Membangun model untuk memprediksi nutrisi setiap category

model <- rpart(Category~., data=train) #rpart : untuk memperoleh model classification Decision Tree
model

#Bentuk visualisasi dari model classification Decision Tree
prp(model, type=1, extra=2)
print(prp(model, type=1, extra=2))
#Opsi extra=2 meminta fungsi menampilkan proporsi dari masing-masing kelas variabel target dan kelas apa yang dominan

"""Melakukan prediksi sesuai dengan model yang terbentuk menggunakan metode Decision Tree sebelumnya."""

#Fungsi prediksi model
pred_dt <- predict(model, test, type="class")
pred_dt

confusionMatrix(pred_dt, test$Category)
print(confusionMatrix(pred_dt, test$Category))

"""
Jika kita hanya membuat model tunggal pada data, maka model tersebut memiliki resiko untuk overfitting atau underfitting, dan variansi besar atau bias. Oleh karena itu, untuk menghindari hal tersebut perlu dilakukan pembentukan banyak model pada data training kemudian dikombinasikan. Random forest merupakan salah satu metode populer dari ensembling technique yang biasa digunakan untuk meningkatkan performa prediksi Decision Tree. Cara kerja Random Forest adalah dengan merata-ratakan banyak model yang terbentuk sehingga mampu mereduksi variansinya"""

model_rf <- randomForest(Category~., train, ntree=50)
model_rf

varImpPlot(model_rf)
print(varImpPlot(model_rf))
#bedasarkan hasil output Sodium adalah variabel terpenting dalam model untuk memprediksi Category

"""Bedasarkan hasil output Sodium adalah variabel terpenting dalam model untuk memprediksi Category

Selanjutnya melakukan prediksi model sesuai dengan model yang terbentuk dari metode Random Forest.
"""

pred_rf <- predict(model_rf, test)  
pred_rf

mean(pred_rf == test$Category) #menunjukkan nilai akuraasi dari prediksi

confusionMatrix(pred_rf, test$Category)
print(confusionMatrix(pred_rf, test$Category))

mean(pred_rf == test$Category) #menunjukkan nilai akuraasi dari prediksi



"""Kesimpulan: Berdasarkan pembentukan model dengan menggunakan Decision Tree dan Random Forest dengan data training sebesar 80% dan data testing sebesar 20%, diperoleh nilai akurasi sebesar 0.8163 atau 82%"""