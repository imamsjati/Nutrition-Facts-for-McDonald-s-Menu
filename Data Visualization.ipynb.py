# -*- coding: utf-8 -*-
"""Challenge_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dXuARy-lkmYDAca1nryaH0vq6TSaGqk6

## **DTS Data Science** 
# Institut Teknologi Sepuluh Nopember (Kelas B)
Kelompok 7 
1. Arum Helmi Manggala Putri 
2. Imam Sasongko Jati 
3. Rahma Dewi Kartika Sari 
4. Ridho Satria Adri

# **Challenge 1**

## **Nutrition Facts for McDonald's Menu**

**Introduction**

Ray Kroc wanted to build a restaurant system that would be famous for providing food of cosistently high quality and uniform methods of preparation. He wanted to serve burgers, buns, fries and beverages that tasted just the same in Alaska as they did in Alabama. To achieve this, he chose a unique path: persuading both franchisees and suppliers to buy into his vision, working not for McDonald's but for themselves, together with McDonald's. Many of McDonald's most famous menu item's - Like Big Mac, Filet-O-Fish, and Egg McMuffin were created by franchisees

**Nutrition Facts for McDonald's Menu Dataset** provides a nutrition analysis of every menu item on the US McDonald's menu, including breakfast, beef burgers, chicken and fish sandwiches, fries, salads, soda, coffee and tea, milkshakes, and desserts.

## Data Acquisition

Melakukan import library yang diperlukan
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

!pip install pulp
!pip install plotly_express
import plotly.figure_factory as ff
import matplotlib.pyplot as plt
import pulp as pl # is a Python linear programming API for defining problems and invoking external solvers.
from pulp import *

from google.colab import files
data_to_load = files.upload()

"""Upload file csv dataset yang digunakan menggunakan library pandas dan menampilkan data dalam file"""

import io
df = pd.read_csv(io.BytesIO(data_to_load['menu.csv']))
df

"""## Data Exploratory

Melakukan pengecekan isi pada data apakah terdapat data yang kosong atau tidak
"""

df.isnull().values.any()

"""Tipe data tiap kolom perlu diketahui agar mudah untuk mengelolah data dalam kolom tersebut"""

#check data
df.dtypes

"""## **Data Exploration**"""

df.describe()

"""# 1. How many calories does the average McDonald's value meal contain?

Pilih fitur-fitur yang akan digunakan dalam pengolahan data, dalam kasus ini dipilih fitur "Category","Calories","Calories from Fat",dan "Total Calories". Pemilihan fitur tersebut dikarenakan kita akan membandingkan nilai kalori tiap menu berdasarkan kategory.
"""

calories_data = df.iloc[:,:5]
calories_data['Total Calories'] = calories_data['Calories']+calories_data['Calories from Fat']
calories_by_category = calories_data.groupby('Category').mean().sort_values(by='Total Calories')
calories_by_category

"""Didapati tabel baru berupa hasil rata-rata jumlah kalori baik dari lemak maupun bukan dan juga total kalori secara keseluruhan"""

#Total Calories Average by Category 
calories_by_category.iloc[:,:2].plot(kind='barh', stacked=True)
plt.title('Total Calories Average by Category')
plt.ylabel('Total Calories')
plt.show()

"""Dari visualisasi data diketahui kategori menu Chicken & Fish memiliki rata-rata jumlah total kalori tertinggi.

# 2 How much do beverages, like soda or coffee, contribute to the overall caloric intake?

Untuk mengetahui persentase kategori menu beverges terhadap keseluruhan divisualisasikan menggunakan Pie Chart dengan data set yang digunakan adalah hasil shorting data dari mencari jumlah kalori secara keseluruhan tiap kategori menu.
"""

pie_df = df.groupby('Category', axis=0).sum()
print(type(pie_df))
colors_list = ['orange', 'maroon', 'coral', 'lightskyblue', 'lightgreen', 'pink', 'red', 'lightcoral', 'green']
explode_list = [0, 0.2, 0, 0, 0.2, 0, 0, 0.2, 0] # ratio for each category with which to offset each wedge.

pie_df['Calories'].plot(kind='pie',
                            figsize=(15, 6),
                            autopct='%1.1f%%', 
                            startangle=90,    
                            shadow=True,       
                            labels=None,         # turn off labels on pie chart
                            pctdistance=1.2,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                            colors=colors_list,  # add custom colors
                            explode=explode_list # 'explode' lowest 3 Categories
                            )

# scale the title up by 12% to match pctdistance
plt.title('Calories intake contribution', y=1.12) 

plt.axis('equal') 

# add legend
plt.legend(labels=pie_df.index, loc='upper left') 

plt.show()

"""Visualisasi Pie Char menggambarkan bahwa kategori menu beverages mneyumbang 3.2% dari total keseluruhan menu

# 3 Does ordered grilled chicken instead of crispy increase a sandwich's nutritional value?
"""

header = df.columns.tolist()
nutrition = ['Serving Size',
 'Calories',
 'Calories from Fat',
 'Total Fat',
 'Total Fat (% Daily Value)',
 'Saturated Fat',
 'Saturated Fat (% Daily Value)',
 'Trans Fat',
 'Cholesterol',
 'Cholesterol (% Daily Value)',
 'Sodium',
 'Sodium (% Daily Value)',
 'Carbohydrates',
 'Carbohydrates (% Daily Value)',
 'Dietary Fiber',
 'Dietary Fiber (% Daily Value)',
 'Sugars',
 'Protein',
 'Vitamin A (% Daily Value)',
 'Vitamin C (% Daily Value)',
 'Calcium (% Daily Value)',
 'Iron (% Daily Value)']

corr = df[nutrition].corr()

mask = np.zeros_like(corr)
mask[np.triu_indices_from(mask)] = True

fig = plt.figure(figsize = (10,10))
ax = sns.heatmap(corr,
                 mask = mask,
                 square =True,
                 cmap="vlag",
                 annot=True
                )
ax.set_title("Nutrition Correlation");

"""Dari heat map di atas, dapat kita ketahui bahwa Fat memiliki korelasi paling tinggi dengan kalori, diikuti oleh protein pada urutan kedua (0.79) dan pada urutan ketiga, karbohidrat (0.78). Selain itu korelasi dengan kalori, ada korelasi yang tinggi dengan fitur lain, misalnya sodium dan iron (0.87) dan sodium dengan protein (0.87)"""

sandwich_data = df[df['Item'].str.contains('Sandwich')]
sandwich_data = sandwich_data.iloc[:,[1,6,8,11,13,15,17,20,21,22,23]]
sandwich_data['Total Value'] = sandwich_data.sum(axis=1)
sandwich_data['Chicken Type'] = sandwich_data['Item'].str.extract("(Crispy|Grilled)")
sandwich_data

chicken_data = sandwich_data.groupby('Chicken Type').mean().sort_values(by='Total Value')
chicken_data

chicken_data.iloc[:,:10].plot(kind='bar', stacked=False)
plt.title('Total Nutritions by Chicken Type')
plt.ylabel('Nutririons')
plt.xlabel('Chicken Type')

plt.legend(loc="upper left", bbox_to_anchor=(1, 0.5, 0, 0.52))

plt.show()

"""Dari grafik di atas, dapat dilihat bilamana banyak nutrisi baik pada Menu Sandwich dengan isian Grilled Chicken lebih tinggi daripada menu Sandwich dengan isian Crispy Chicken.

# 4 What about ordering egg whites instead of whole eggs?

Sebelum menganalisis lebih jauh, isi dari data set difilter terlebih dahulu, kemudian menu yang mengandung telur ditampilkan seperti pada tabel berikut ini.
"""

egg_data = df[df['Item'].str.contains('Egg')]
egg_data = egg_data.iloc[:,[1,6,8,11,13,15,17,20,21,22,23]]
egg_data['Total Value'] = egg_data.sum(axis=1)
egg_data['Egg Type'] = egg_data['Item'].str.extract("(Egg Whites|Egg)")
egg_data

egg_data = egg_data.groupby('Egg Type').mean().sort_values(by='Total Value')
egg_data

"""Tabel di atas menampilkan rata-rata nilai kandungan nutrisi dari menu-menu yang mengandung telur utuh dan putih telur saja. Dapat dilihat, menu yang mengandung putih telur saja memiliki kandungan kolesterol yang jauh lebih rendah daripada menu-menu yang mengandung telur utuh, begitu juga dengan total value nutrisi yang lebih rendah daripada menu-menu yang memiliki telur utuh sebagai salah satu komposisinya. Berikut ditampilkan visualisasi dari tabel terkait."""

egg_data.iloc[:,:10].plot(kind='bar', stacked=False)
plt.title('Total Nutritions by Egg Type')
plt.ylabel('Nutririons')
plt.xlabel('Egg Type')

plt.legend(loc="upper left", bbox_to_anchor=(1, 0.5, 0, 0.52))

plt.show()

"""# 5. What is the least number of items could you order from the menu to meet  one day's nutritional requirements with minimum calories?

Untuk mengetahui jumlah menu yang bisa dipesan dengan kalori minimum, kami menggunakan Pemrograman linier akan digunakan sebagai metode optimasi. Karena metode ini dapat melakukan proses kalkulasi yang cukup cepat, di mana tidak terdapat korelasi orde tinggi yang masuk ke dalam fungsi objektif.

Hal pertama yang harus dilakukan adalah mendefinisikan Objective Function (antara meminimalkan atau memaksimalkan). Berdasarkan studi kasus kali ini, Objective Function yang akan digunakan adalah meminimalkan jumlah kalori.

Untuk menjawab pertanyaan ini, kami menggunakan Peraturan Menteri Kesehatan Republik Indonesia Nomor 28 tahun 2019 tentang Angka Kecukupan Gizi yang dianjurkan untuk Masyarakat Indonesia sebagai acuan constraints
(http://www.p2ptm.kemkes.go.id/)

* Energy: ~2,000 kcal
* Total Fat: < 65 g (Saturated < 32g)
* Carbohydrates > 260g
* Sugars: 220g ~ 260g
* Protein: 60g ~ 65g
* Sodium: < 5g
"""

#Ubah data menjadi tipe Dictionaries,sehingga variable constraints bisa masuk ke dalam fungsi optimisasi.
# Convert the item names to a list
menu_mcd = df.Item.tolist()
# Convert all of the macro nutrients fields to be dictionaries of the item names
Calories = df.set_index('Item')['Calories'].to_dict()
TotalFat = df.set_index('Item')['Total Fat'].to_dict()
SaturatedFat = df.set_index('Item')['Saturated Fat'].to_dict()
Carbohydrates = df.set_index('Item')['Carbohydrates'].to_dict()
Sugars = df.set_index('Item')['Sugars'].to_dict()
Protein = df.set_index('Item')['Protein'].to_dict()
Sodium = df.set_index('Item')['Sodium'].to_dict()

#minimization problem
prob=LpProblem("McOptimizationProblem",LpMinimize)

"""Perlu untuk menentukan jumlah item minimum, yaitu 1 (tidak bernilai negatif dan tidak berbentuk desimal). Sehingga perlu untuk memerintah optimizer ini untuk memberikan output berupa integer saja. Selain itu, kita juga bisa menentukan jumlah minimum dan maksimum item sebagai output."""

#set the minimum amount
variasi_menu = LpVariable.dicts("MenuItems",menu_mcd,lowBound=0,upBound=10,cat='Integer')

#Constraints dimasukkan ke dalam fungsi optimisasi
#Constraints
# First entry is the calorie calculation
prob += lpSum([Calories[i]*variasi_menu[i] for i in menu_mcd]), 'Calories'
# Total Fat must be <= 65 g
prob += lpSum([TotalFat[i]*variasi_menu[i] for i in menu_mcd]) <=65, 'Total_Fat'
# Saturated Fat is <= 32 g
prob += lpSum([SaturatedFat[i]*variasi_menu[i] for i in menu_mcd]) <= 32, 'Saturated_Fat'
# Carbohydrates must be more than 260 g
prob += lpSum([Carbohydrates[i]*variasi_menu[i] for i in menu_mcd]) >= 360, "Carbohydrates_lower"
prob += lpSum([Carbohydrates[i]*variasi_menu[i] for i in menu_mcd]) <= 430, "Carbohydrates_upper"
# Sugar between 220-260 g
prob += lpSum([Sugars[i]*variasi_menu[i] for i in menu_mcd]) >= 220, 'Sugars_lower'
prob += lpSum([Sugars[i]*variasi_menu[i] for i in menu_mcd]) <= 260, 'Sugars_upper'
# Protein between 60-65g
prob += lpSum([Protein[i]*variasi_menu[i] for i in menu_mcd]) >= 60, 'Protein_lower'
prob += lpSum([Protein[i]*variasi_menu[i] for i in menu_mcd]) <= 65, 'Protein_upper'
# Sodium <= 5000 mg
prob += lpSum([Sodium[i]*variasi_menu[i] for i in menu_mcd]) <= 5000, 'Sodium'

prob.writeLP("McOptimization.lp")
prob.solve()
data_matrix = []

print("Status:", LpStatus[prob.status])
for v in prob.variables():
    if v.varValue > 0:
        Item = df.loc[df['Item'] == v.name.replace('MenuItems_','').replace('_',' ')]
        Item_Calories = Item['Calories'].values*v.varValue
        Item_TotalFat = Item['Total Fat'].values*v.varValue
        Item_Carbohydrates = Item['Carbohydrates'].values*v.varValue
        Item_Protein = Item['Protein'].values*v.varValue
        Item_Sodium = Item['Sodium'].values*v.varValue
        data_matrix.append([v.name.replace('MenuItems_','').replace('_',' '),v.varValue,Item_Calories[0], \
                           Item_TotalFat[0],Item_Carbohydrates[0],Item_Protein[0],Item_Sodium[0]])
print(' ')
results = {}
# Get the total calories (minimized)
print("Total Calories = ", value(prob.objective))
# Loop over the constraint set and get the final solution
results = {}
for constraint in prob.constraints:
    total_s = 0

"""Dari sini dapat diketahui bahwa metode yang digunakan dapat memberikan hasil sesuai yang diinginkan (optimum), dengan jumlah kalori 1530 kcal."""

import plotly as py
import plotly.figure_factory as ff

table = ff.create_table(data_matrix)
print(data_matrix)

data_matrix1=list(map(list, zip(*data_matrix)))

itm = data_matrix1[0]
amo = data_matrix1[1]
cal = data_matrix1[2]
tfat = data_matrix1[3]
carb = data_matrix1[4]
pro = data_matrix1[5]
sdm = data_matrix1[6]
# dictionary of lists
dict = {'Item': itm, 'Amount': amo, 'Calories': cal, 'Total Fat': tfat, 'Carbohydrates': carb, 'Protein': pro,
        'Sodium': sdm}

hasil_akhir = pd.DataFrame(dict)

hasil_akhir
print(hasil_akhir.to_string())

"""Setelah dilakukan optimisasi menggunakan metode pemrograman linier, dapat diketahui bahwa seseorang dapat mengonsumsi 6 jenis menu dengan jumlah dan ukuran porsi seperti yang tertera pada tabel di atas."""